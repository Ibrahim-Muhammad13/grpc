// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.1
// source: pb/avg.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AvgServercieClient is the client API for AvgServercie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvgServercieClient interface {
	Avg(ctx context.Context, opts ...grpc.CallOption) (AvgServercie_AvgClient, error)
}

type avgServercieClient struct {
	cc grpc.ClientConnInterface
}

func NewAvgServercieClient(cc grpc.ClientConnInterface) AvgServercieClient {
	return &avgServercieClient{cc}
}

func (c *avgServercieClient) Avg(ctx context.Context, opts ...grpc.CallOption) (AvgServercie_AvgClient, error) {
	stream, err := c.cc.NewStream(ctx, &AvgServercie_ServiceDesc.Streams[0], "/avg.avgServercie/avg", opts...)
	if err != nil {
		return nil, err
	}
	x := &avgServercieAvgClient{stream}
	return x, nil
}

type AvgServercie_AvgClient interface {
	Send(*AvgRequest) error
	CloseAndRecv() (*AvgResponse, error)
	grpc.ClientStream
}

type avgServercieAvgClient struct {
	grpc.ClientStream
}

func (x *avgServercieAvgClient) Send(m *AvgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *avgServercieAvgClient) CloseAndRecv() (*AvgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgServercieServer is the server API for AvgServercie service.
// All implementations must embed UnimplementedAvgServercieServer
// for forward compatibility
type AvgServercieServer interface {
	Avg(AvgServercie_AvgServer) error
	mustEmbedUnimplementedAvgServercieServer()
}

// UnimplementedAvgServercieServer must be embedded to have forward compatible implementations.
type UnimplementedAvgServercieServer struct {
}

func (UnimplementedAvgServercieServer) Avg(AvgServercie_AvgServer) error {
	return status.Errorf(codes.Unimplemented, "method Avg not implemented")
}
func (UnimplementedAvgServercieServer) mustEmbedUnimplementedAvgServercieServer() {}

// UnsafeAvgServercieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvgServercieServer will
// result in compilation errors.
type UnsafeAvgServercieServer interface {
	mustEmbedUnimplementedAvgServercieServer()
}

func RegisterAvgServercieServer(s grpc.ServiceRegistrar, srv AvgServercieServer) {
	s.RegisterService(&AvgServercie_ServiceDesc, srv)
}

func _AvgServercie_Avg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvgServercieServer).Avg(&avgServercieAvgServer{stream})
}

type AvgServercie_AvgServer interface {
	SendAndClose(*AvgResponse) error
	Recv() (*AvgRequest, error)
	grpc.ServerStream
}

type avgServercieAvgServer struct {
	grpc.ServerStream
}

func (x *avgServercieAvgServer) SendAndClose(m *AvgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *avgServercieAvgServer) Recv() (*AvgRequest, error) {
	m := new(AvgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgServercie_ServiceDesc is the grpc.ServiceDesc for AvgServercie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvgServercie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avg.avgServercie",
	HandlerType: (*AvgServercieServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "avg",
			Handler:       _AvgServercie_Avg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pb/avg.proto",
}
